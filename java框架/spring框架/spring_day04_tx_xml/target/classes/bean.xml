<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">


    <context:property-placeholder location="jdbc.properties"></context:property-placeholder>
     <!--配置数据库-->
     <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" scope="singleton">
         <property name="driverClassName" value="${jdbc.driver}"></property>
         <property name="url" value="${jdbc.url}"></property>
         <property name="username" value="${jdbc.username}"></property>
         <property name="password" value="${jdbc.password}"></property>
     </bean>
     <!--配置数据源-->

     <!--配置Runner-->
     <bean id="template" class="org.springframework.jdbc.core.JdbcTemplate" scope="prototype">
         <property name="dataSource" ref="druidDataSource"></property>
     </bean>

     <!--添加依赖扫描-->
     <context:component-scan base-package="cn.itcast"></context:component-scan>

   <!-- <bean id="AccountDao" class="cn.itcast.dao.impl.IAccountDaoImpl">
        <property name="template" ref="template"></property>

    </bean>
    <bean id="AccountService" class="cn.itcast.Service.impl.AccountServiceImpl3">
        <property name="accountDao" ref="AccountDao"></property>
    </bean>-->

<!--    &lt;!&ndash;开启配置注解的aop&ndash;&gt;
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->

    <!--
    基于xml的事务管理配置步骤
        1.配置事务管理器
        2.配置事务的通知 需要导入事务的约束
            使用tx:advice标签配置事务通知
                属性：id:给事务通知起一个唯一标志
                     transaction-manager:给事务通知添加一个事务管理器
        3.配置aop中的通用切入点表达式
        4.建立事务通知和切入点表达式的对应关系
        5.配置事务的属性
            是在事务的通知tx：advice标签内部
            isolation=""用于指定事务的隔离级别，默认值是default，表使用数据库的默认隔离级别
            propagation=""用于指定事务的传播行为，默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS
            read-only=""用于指定事务是否只读，只有查询方法，才能设置为true，表示只读，默认值是false，表示读写
            rollback-for=""用于指定一个异常，当产生异常时，事务回滚，产生其他异常时，事务不回滚，没有默认值表示任何异常都回滚
            timeout=""用于指定事务的超时时间，默认值是-1，表示永不超时，如果指定了数值，以秒为单位
            no-rollback-for=""用于指定一个异常，当产生异常时，事务不回滚，产生其他异常时，事务回滚，没有默认值表示任何异常都回滚
            rollback-for=""用于指定一个异常，当产生异常时，事务回滚，产生其他异常时，事务不回滚，没有默认值表示任何异常都回滚
-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"></property>
    </bean>

    <!--配置事务的通知-->
    <tx:advice id="ManagerAdvice" transaction-manager="transactionManager">
        <tx:attributes>

            <tx:method name="*" propagation="REQUIRED" read-only="false"></tx:method>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"></tx:method>

        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式-->
        <aop:pointcut id="pt1" expression="execution(* cn.itcast.Service.impl.*.*(..))"/>

        <!--建立事务通知和切入点表达式的对应关系-->
        <aop:advisor advice-ref="ManagerAdvice" pointcut-ref="pt1"></aop:advisor>

    </aop:config>

    <!--开启对注解事务的支持-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
</beans>