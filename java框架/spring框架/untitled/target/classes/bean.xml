<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        ">

    <!--配置spring的ioc，把service对象配置进来-->
    <bean id="AccountService" class="cn.itcast.Service.impl.IAccountServiceImpl" scope="prototype"></bean>

    <!--spring中基于xml的aop配置步骤
        1.把通知bean也交个spring来管理
        2.使用aop：config标签表明开始aop的配置
        3.使用aop：aspect标签表明配置切面
            id:给切面一个唯一的标准
            ref：指定通知类bean的id
        4.在aop：aspect标签内部使用对应标签来配置通知的类型
                我们现在示例是让printLog方法在切入点方法之前执行，使用是前置通知
                aop：before：表示配置前置通知
                    method:用于指定Logger类中的那个方法是前置通知
                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
                切入点表达式的写法：
                    关键字：execution（表达式）
                    表达式： 访问修饰符 返回值 包名.包名.....类名，方法名（参数列表）
                    标准表达式写法：
                        public void cn.itcast.service.impl.AccountServiceImpl.save();
                    访问修饰符可以省略
                        void cn.itcast.service.impl.AccountServiceImpl.save();
                    返回值可以用通配符省略
                        * cn.itcast.service.impl.AccountServiceImpl.save();
                    包名可以使用通配符，表示任意包，但是有几级包，就需要写几个*.
                        * *.*.*.*.AccountServiceImpl.save();
                    包名可以使用*..表示当前包及其子包
                        * *..AccountServiceImpl.save()；
                    类名和和方法名都可以使用*来实现通配
                        * *..*.*();
                    参数类型
                        可以直接写数据类型：
                            基本类型直接写名称      int
                            引用类型写包名.类名的方式  java.lang.String
                            可以使用通配符表示任意类型，但必须有参数
                            可以使用..  表示有无参数都有可以
                                 全通配写法：
                                 * *..*.*(..)
                            实际开发中切入点表达式的通常写法：
                                切刀业务层实现类下的所有方法
                                    * cn.itcast.Service.impl.*.*(..)




    -->

    <!--1.配置logger类-->
    <bean id="logger" class="cn.itcast.utils.Logger"></bean>

    <!--2.配置aop-->
    <aop:config>
        <!--配置切入点表达式，id属性用于指定表达式的唯一标志，expression属性用于表达式内容
                此标签写在aop：aspect标签内部只能当前切面使用
                还可以写的在aop：aspect外面，此时变成所有切面可以使用，但是要放在aop：aspect上面
            -->
        <aop:pointcut id="pt1" expression="execution( * cn.itcast.Service.impl.*..*(..))"/>

        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置前置通知的类型，并且建立通知方法和切入点方法的关联，在切入点方法之前执行-->
            <!--<aop:before method="beforeprintLog" pointcut-ref="pt1"></aop:before>

            &lt;!&ndash;配置后置通知的类型，并且建立通知方法和切入点方法的关联，在切入点方法执行成功后执行，和异常通知只能执行一个&ndash;&gt;
            <aop:after-returning method="afterprintLog" pointcut-ref="pt1"></aop:after-returning>

            &lt;!&ndash;配置异常通知的类型，并且建立通知方法和切入点方法的关联，在切入点方法执行失败后执行&ndash;&gt;
            <aop:after-throwing method="errorPrintLog" pointcut-ref="pt1"></aop:after-throwing>

            &lt;!&ndash;最终后置通知的类型，并且建立通知方法和切入点方法的关联，在无论切入点方法执行成功还是失败都执行&ndash;&gt;
            <aop:after method="lastPrintLog" pointcut-ref="pt1"></aop:after>-->
            <aop:around method="aroundPringLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>